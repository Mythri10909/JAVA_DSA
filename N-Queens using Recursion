import java.util.*;

class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        char[][] board = new char[n][n];

        // fill board with '.'
        for (int i = 0; i < n; i++) {
            Arrays.fill(board[i], '.');
        }

        nQueens(board, n, 0, ans);
        return ans;
    }

    public void nQueens(char[][] board, int n, int r, List<List<String>> ans) {
        if (r == n) {
            List<String> solution = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                solution.add(new String(board[i]));
            }
            ans.add(solution);
            return;
        }

        for (int j = 0; j < n; j++) {
            if (isSafe(board, r, j)) {
                board[r][j] = 'Q';
                nQueens(board, n, r + 1, ans);
                board[r][j] = '.';
            }
        }
    }

    public boolean isSafe(char[][] board, int r, int c) {
        int n = board.length;

        // check column
        for (int i = 0; i < r; i++) {
            if (board[i][c] == 'Q') return false;
        }

        // check left diagonal
        for (int i = r - 1, j = c - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') return false;
        }

        // check right diagonal
        for (int i = r - 1, j = c + 1; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q') return false;
        }

        return true;
    }
}
